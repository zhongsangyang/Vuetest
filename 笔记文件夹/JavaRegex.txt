[.....]）表示字符组，整个字符组中会有多个字符位列其中，该字符组表示的含义是：匹配任意一个字符，该字符是位列字符组中的。
[0-9]等价于[0123456789] 表示匹配其中一个数字
/ ^ -元字符需要转义用// /^ /-

元字符 '^' 表示排除的意思，和元字符 '-' 类似，只有放在所有字符的最前面才具有特殊含义，否则只能表示普通字符。例如

\d：等同于字符组 [0-9]，表示任意一个数字字符
\w：较为常见，等同于字符组[0-9a-zA-Z]，表示任意一个world（单词字符）
\s：等同于[ \t\n\x0B\f\r]，匹配的是一个空格字符（space）
当然，它们也有相对应的大写形式，但是表示的意思却是截然相反的。

\D：等同于[^0-9]，表示一个任意非数字字符
\W：等同于[^0-9a-zA-Z]，表示任意一个非单词字符，往往会是一些特殊符号
\S：等同于[^\t\n\x0B\f\r]，匹配一个任意非空格的字符

3、用于指定字符多次出现的量词
所谓的量词主要是三个元字符，它们主要用于指定量词前面的字符在匹配时可以多次出现，具体区别接下来会介绍。首先我们需要知道，这三个元字符是：+ ，*， ?。下面描述它们各自作用及相互之间的区别：

+：该元字符指定位于元字符前面的普通字符可以出现一次或者多次。例如：se+cyy这个正则表达式，字符secyy，seeeecyy都是可以匹配的，但是scyy是不能匹配的，前面的字符是必须出现的。
*：该元字符指定位于元字符前面的普通字符可以出现零次或多次。例如：



来源
https://www.cnblogs.com/yangming1996/p/7168353.html
https://www.cnblogs.com/bkyj/p/6538349.html

.肯定顺序环视:(?=......) single(?=cyy)字符e的右边即为边界情切要求为cyy，所以该表达式只能匹配singelecyy
.否定顺序循环它要求表达式的右边字符串必须不 能满足某种约定，和上一种种的情况是相反的(?!....)
.肯定逆序环视:它要求表达式的左边(?<=....)
.否定逆序环视:它要求表达式的左边必须不能满足某种约束,语法格式为(?!<=....);

http://blog.csdn.net/zsg88/article/details/73715947 redis学习